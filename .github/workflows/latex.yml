name: Build LaTeX and Deploy PDFs

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Serve per git log e diff completo

      - name: Detect changed courses
        id: changes
        run: |
          # Trova tutte le lezioni modificate
          changed_tex=$(git diff --name-only HEAD~1 HEAD | grep 'main.tex' || true)
          # Trova la cartella principale del corso (assume struttura .../course_name/main.tex)
          changed_courses=$(echo "$changed_tex" | xargs -n1 dirname | sed 's|/[^/]*$||' | sort -u)
          # Output
          echo "changed_courses=$changed_courses" >> $GITHUB_OUTPUT

      - name: Compile LaTeX courses and generate PDFs
        run: |
          mkdir -p public
          echo "[" > public/pdfs.json
          first_entry=true

          # Trova tutti i corsi (cartelle contenenti main.tex)
          all_courses=$(find . -name "main.tex" | xargs -n1 dirname | sed 's|/[^/]*$||' | sort -u)

          for course_dir in $all_courses; do
            relative_path=${course_dir#./}
            sanitized_name=$(echo "$relative_path" | sed 's|/|_|g')
            pdf_file="${sanitized_name}.pdf"

            # Se il corso è stato modificato, compila
            if echo "${{ steps.changes.outputs.changed_courses }}" | grep -q "$course_dir"; then
              echo "📄 Compilo corso modificato: $course_dir"
              docker run --rm -v "$PWD:/data" -w "/data/$course_dir" texlive/texlive:latest \
                latexmk -pdf -interaction=nonstopmode -halt-on-error main.tex || \
                echo "⚠️ Compilazione fallita per $course_dir, uso PDF esistente se presente"
            else
              echo "ℹ️ Corso non modificato, mantengo PDF esistente: $course_dir"
            fi

            # Copia PDF se presente
            if [ -f "$course_dir/main.pdf" ]; then
              cp "$course_dir/main.pdf" "public/$pdf_file"
            fi

            # Metadata dal config.json se presente
            if [ -f "$course_dir/config.json" ]; then
              title=$(jq -r '.title' "$course_dir/config.json")
              faculty=$(jq -r '.faculty' "$course_dir/config.json")
              level=$(jq -r '.level' "$course_dir/config.json")
              professor=$(jq -r '.professor' "$course_dir/config.json")
              semester=$(jq -r '.semester' "$course_dir/config.json")
              year=$(jq -r '.year' "$course_dir/config.json")
            else
              title="Corso sconosciuto"
              faculty="N/D"
              level="N/D"
              professor="N/D"
              semester="N/D"
              year="N/D"
            fi

            # Metadata git a livello di corso (tutte le lezioni)
            last_edit_date=$(git log -1 --format="%cs" -- "$course_dir")
            last_editor_name=$(git log -1 --format="%an" -- "$course_dir")
            last_editor_email=$(git log -1 --format="%ae" -- "$course_dir")
            last_editor_url="https://github.com/${last_editor_email%@*}"

            contributors=$(git log --format='%an|%ae' -- "$course_dir" | sort -u | jq -R -s -c 'split("\n")[:-1] | map({name: split("|")[0], profile_url: ("https://github.com/" + (split("|")[1] | split("@")[0]))})')

            # Aggiungi al JSON
            if [ "$first_entry" = true ]; then
              first_entry=false
            else
              echo "," >> public/pdfs.json
            fi

            echo "{
              \"faculty\": \"$faculty\",
              \"semester\": \"$semester\",
              \"level\": \"$level\",
              \"title\": \"$title\",
              \"professor\": \"$professor\",
              \"year\": \"$year\",
              \"file_name\": \"$pdf_file\",
              \"last_edit_date\": \"$last_edit_date\",
              \"last_editor\": {
                \"name\": \"$last_editor_name\",
                \"profile_url\": \"$last_editor_url\"
              },
              \"contributors\": $contributors
            }" >> public/pdfs.json

          done

          echo "]" >> public/pdfs.json

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Copy static website
        run: |
          mkdir -p public/web_pages
          cp -r web_pages/* public/web_pages/ || echo "Cartella static non trovata, ignoro"
          cp index.html public/ || echo "index.html mancante"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
