name: Build LaTeX and Deploy PDFs

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # serve per git log e diff

      - name: Setup
        run: |
          mkdir -p public
          echo "[" > public/pdfs.json
          first_entry=true

      - name: Process courses and lessons
        run: |
          # Trova tutte le lezioni (main.tex)
          find ./latex_courses -name "main.tex" | while read -r tex_file; do
            course_dir=$(dirname "$tex_file" | xargs dirname)  # cartella del corso
            lesson_dir=$(dirname "$tex_file")                 # cartella della lezione

            # Raccogliamo info sul PDF
            relative_path=${lesson_dir#./}
            sanitized_name=$(echo "$relative_path" | sed 's/\//_/g' | sed 's/^_//' | sed 's/_$//')
            pdf_file="latex_courses_${sanitized_name}.pdf"
            pdf_path="public/$pdf_file"

            # Verifica se la lezione è stata modificata o se il PDF manca
            last_commit=$(git log -1 --format="%H" -- "$tex_file")
            pdf_exists=false
            [ -f "$pdf_path" ] && pdf_exists=true

            changed=false
            if [ "$pdf_exists" = false ]; then
              changed=true
              echo "📄 PDF mancante, compilo $tex_file"
            else
              # controlla se la lezione è cambiata rispetto all'ultimo commit
              last_pdf_commit=$(git log -1 --format="%H" -- "$pdf_path" || echo "")
              if [ "$last_commit" != "$last_pdf_commit" ]; then
                changed=true
                echo "📄 Lezione modificata, ricompilo $tex_file"
              fi
            fi

            if [ "$changed" = true ]; then
              docker run --rm -v "$(pwd):/data" -w "/data/$lesson_dir" texlive/texlive:latest latexmk -pdf -interaction=nonstopmode -halt-on-error main.tex || echo "⚠️ Compilazione fallita, mantengo PDF esistente se presente"
              cp "$lesson_dir/main.pdf" "$pdf_path" 2>/dev/null || echo "⚠️ PDF non generato"
            fi

            # Dati dal config.json del corso
            config_file="$course_dir/config.json"
            if [ -f "$config_file" ]; then
              title=$(jq -r '.title' "$config_file")
              faculty=$(jq -r '.faculty' "$config_file")
              level=$(jq -r '.level' "$config_file")
              professor=$(jq -r '.professor' "$config_file")
              semester=$(jq -r '.semester' "$config_file")
              year=$(jq -r '.year' "$config_file")
            else
              title="Corso sconosciuto"
              faculty="N/D"
              level="N/D"
              professor="N/D"
              semester="N/D"
              year="N/D"
            fi

            # Metadata git aggregato su tutte le lezioni del corso
            last_edit_date=$(git log -1 --format="%cs" -- "$course_dir")
            contributors=$(git log --format='%an|%ae' -- "$course_dir" | sort -u | jq -R -s -c 'split("\n")[:-1] | map({name: split("|")[0], profile_url: ("https://github.com/" + (split("|")[1] | split("@")[0]))})')

            # Aggiungi al JSON
            if [ "$first_entry" = true ]; then
              first_entry=false
            else
              echo "," >> public/pdfs.json
            fi

            echo "{
              \"faculty\": \"$faculty\",
              \"semester\": \"$semester\",
              \"level\": \"$level\",
              \"title\": \"$title\",
              \"professor\": \"$professor\",
              \"year\": \"$year\",
              \"file_name\": \"$pdf_file\",
              \"last_edit_date\": \"$last_edit_date\",
              \"contributors\": $contributors
            }" >> public/pdfs.json

          done

      - name: Finish JSON
        run: echo "]" >> public/pdfs.json

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Copy static website
        run: |
          mkdir -p public/web_pages
          cp -r web_pages/* public/web_pages/ || echo "Cartella static non trovata, ignoro"
          cp index.html public/ || echo "index.html mancante"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
