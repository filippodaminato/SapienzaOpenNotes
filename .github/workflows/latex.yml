name: Build LaTeX and Deploy PDFs

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # necessario per git log e diff

      - name: Prepare directories
        run: mkdir -p public

      - name: Generate PDFs and metadata
        run: |
          echo "[" > public/pdfs.json
          first_entry=true

          # Cicla su tutti i corsi
          find latex_courses -mindepth 3 -maxdepth 3 -type d | while read -r course_dir; do
              relative_path=${course_dir#./}
              sanitized_name=$(echo "$relative_path" | sed 's/\//_/g' | sed 's/^_//' | sed 's/_$//')
              pdf_file="public/${sanitized_name}.pdf"

              # Controlla se ci sono modifiche nei file .tex del corso
              changed=$(git diff --name-only HEAD~1 HEAD -- "$course_dir" | grep '\.tex$' || true)

              if [ -n "$changed" ] || [ ! -f "$pdf_file" ]; then
                  echo "📄 Compilo corso: $course_dir"
                  docker run --rm -v "$(pwd):/data" -w "/data/$course_dir" texlive/texlive:latest \
                    latexmk -pdf -interaction=nonstopmode -halt-on-error main.tex || \
                    echo "⚠️ Compilazione fallita, manterrò PDF esistente se presente"
              else
                  echo "✅ Corso non modificato, mantengo PDF esistente"
              fi

              # Copia il PDF in public se esiste
              if [ -f "$course_dir/main.pdf" ]; then
                  cp "$course_dir/main.pdf" "$pdf_file"
              fi

              # Estrai metadata dal config.json se presente
              if [ -f "$course_dir/config.json" ]; then
                  title=$(jq -r '.title' "$course_dir/config.json")
                  faculty=$(jq -r '.faculty' "$course_dir/config.json")
                  level=$(jq -r '.level' "$course_dir/config.json")
                  professor=$(jq -r '.professor' "$course_dir/config.json")
                  semester=$(jq -r '.semester' "$course_dir/config.json")
                  year=$(jq -r '.year' "$course_dir/config.json")
              else
                  title="Corso sconosciuto"
                  faculty="N/D"
                  level="N/D"
                  professor="N/D"
                  semester="N/D"
                  year="N/D"
              fi

              # Metadata git (tutte le lezioni nel corso)
              last_edit_date=$(git log -1 --format="%cs" -- "$course_dir")
              contributors=$(git log --format='%an|%ae' -- "$course_dir" | sort -u | jq -R -s -c 'split("\n")[:-1] | map({name: split("|")[0], profile_url: ("https://github.com/" + (split("|")[1] | split("@")[0]))})')

              # Scrive su pdfs.json
              if [ "$first_entry" = true ]; then
                  first_entry=false
              else
                  echo "," >> public/pdfs.json
              fi

              echo "{
                \"faculty\": \"$faculty\",
                \"semester\": \"$semester\",
                \"level\": \"$level\",
                \"title\": \"$title\",
                \"professor\": \"$professor\",
                \"year\": \"$year\",
                \"file_name\": \"${sanitized_name}.pdf\",
                \"last_edit_date\": \"$last_edit_date\",
                \"contributors\": $contributors
              }" >> public/pdfs.json
          done

          echo "]" >> public/pdfs.json

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Copy static website
        run: |
          mkdir -p public/web_pages
          cp -r web_pages/* public/web_pages/ || echo "Cartella static non trovata, ignoro"
          cp index.html public/ || echo "index.html mancante"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
