name: Build LaTeX and Deploy PDFs

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # serve per git log e diff

      - name: Detect changed .tex files
        id: changes
        run: |
          changed=$(git diff --name-only HEAD~1 HEAD | grep 'main.tex' || true)
          # Sostituisci spazi e newline con separatore
          changed_sanitized=$(echo "$changed" | tr '\n' ' ')
          echo "changed_tex=$changed_sanitized" >> $GITHUB_OUTPUT

      - name: Compile LaTeX files and collect metadata
        run: |
          mkdir -p public
          echo "[" > public/pdfs.json
          first_entry=true

          # Determina i .tex da compilare
          if [ -n "${{ steps.changes.outputs.changed_tex }}" ]; then
            tex_files="${{ steps.changes.outputs.changed_tex }}"
          else
            tex_files=$(find . -name "main.tex")
          fi

          for tex_file in $tex_files; do
            dir=$(dirname "$tex_file")
            echo "📄 Compilo (o aggiorno metadata) per $tex_file"

            docker run --rm -v "$(pwd):/data" -w "/data/$dir" texlive/texlive:latest latexmk -pdf -interaction=nonstopmode -halt-on-error main.tex || echo "⚠️ Skip compila fallita, mantengo pdf vecchio se presente"

            if [ -f "$dir/main.pdf" ]; then
              relative_path=${dir#./}
              sanitized_name=$(echo "$relative_path" | sed 's/\//_/g' | sed 's/^_//' | sed 's/_$//')
              pdf_file="${sanitized_name}.pdf"
              cp "$dir/main.pdf" "public/$pdf_file"

              # Estrai dati dal config.json se presente
              if [ -f "$dir/config.json" ]; then
                title=$(jq -r '.title' "$dir/config.json")
                faculty=$(jq -r '.faculty' "$dir/config.json")
                level=$(jq -r '.level' "$dir/config.json")
                professor=$(jq -r '.professor' "$dir/config.json")
                semester=$(jq -r '.semester' "$dir/config.json")
                year=$(jq -r '.year' "$dir/config.json")
              else
                title="Corso sconosciuto"
                faculty="N/D"
                level="N/D"
                professor="N/D"
                semester="N/D"
                year="N/D"
              fi

              # Metadata git
              last_edit_date=$(git log -1 --format="%cs" -- "$tex_file")
              last_editor_name=$(git log -1 --format="%an" -- "$tex_file")
              last_editor_url="https://github.com/$(git log -1 --format="%ae" -- "$tex_file" | cut -d'@' -f1)"

              contributors=$(git log --format='%an|%ae' -- "$tex_file" | sort -u | jq -R -s -c 'split("\n")[:-1] | map({name: split("|")[0], profile_url: ("https://github.com/" + (split("|")[1] | split("@")[0]))})')

              # Aggiungi virgola se non è il primo elemento
              if [ "$first_entry" = true ]; then
                first_entry=false
              else
                echo "," >> public/pdfs.json
              fi

              echo "{" >> public/pdfs.json
              echo "  \"faculty\": \"$faculty\"," >> public/pdfs.json
              echo "  \"semester\": \"$semester\"," >> public/pdfs.json
              echo "  \"level\": \"$level\"," >> public/pdfs.json
              echo "  \"title\": \"$title\"," >> public/pdfs.json
              echo "  \"professor\": \"$professor\"," >> public/pdfs.json
              echo "  \"year\": \"$year\"," >> public/pdfs.json
              echo "  \"file_name\": \"$pdf_file\"," >> public/pdfs.json
              echo "  \"last_edit_date\": \"$last_edit_date\"," >> public/pdfs.json
              echo "  \"last_editor\": {" >> public/pdfs.json
              echo "    \"name\": \"$last_editor_name\"," >> public/pdfs.json
              echo "    \"profile_url\": \"$last_editor_url\"" >> public/pdfs.json
              echo "  }," >> public/pdfs.json
              echo "  \"contributors\": $contributors" >> public/pdfs.json
              echo "}" >> public/pdfs.json

            else
              echo "❌ Nessun PDF trovato per $tex_file"
            fi
          done

          echo "]" >> public/pdfs.json

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Copy static website
        run: |
          mkdir -p public/web_pages
          cp -r web_pages/* public/web_pages/ || echo "Cartella static non trovata, ignoro"
          cp index.html public/ || echo "index.html mancante"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
