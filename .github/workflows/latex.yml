name: Build LaTeX and Deploy PDFs

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # serve per git log e diff

      - name: Detect changed main.tex files
        id: changes
        run: |
          # Trova tutti i main.tex modificati nell'ultimo commit
          changed=$(git diff --name-only HEAD~1 HEAD | grep 'main.tex' || true)
          # Esporta in output GitHub Actions
          echo "changed_tex=$(echo "$changed" | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Compile LaTeX and update pdfs.json
        run: |
          mkdir -p public

          # Carica vecchio JSON se esiste
          if [ -f public/pdfs.json ]; then
            json=$(cat public/pdfs.json)
          else
            json="[]"
          fi

          # Determina quali file compilare
          if [ -n "${{ steps.changes.outputs.changed_tex }}" ]; then
            tex_files="${{ steps.changes.outputs.changed_tex }}"
          else
            tex_files=$(find . -name "main.tex")
          fi

          for tex_file in $tex_files; do
            dir=$(dirname "$tex_file")
            echo "📄 Compilando $tex_file"

            # Compilazione con latexmk (assicura TOC)
            docker run --rm -v "$(pwd):/data" -w "/data/$dir" texlive/texlive:latest \
              latexmk -pdf -interaction=nonstopmode -halt-on-error main.tex || echo "⚠️ Compilazione fallita, mantengo pdf vecchio se presente"

            if [ -f "$dir/main.pdf" ]; then
              relative_path=${dir#./}
              sanitized_name=$(echo "$relative_path" | sed 's/\//_/g' | sed 's/^_//' | sed 's/_$//')
              pdf_file="${sanitized_name}.pdf"
              cp "$dir/main.pdf" "public/$pdf_file"

              # Config JSON
              if [ -f "$dir/config.json" ]; then
                title=$(jq -r '.title' "$dir/config.json")
                faculty=$(jq -r '.faculty' "$dir/config.json")
                level=$(jq -r '.level' "$dir/config.json")
                professor=$(jq -r '.professor' "$dir/config.json")
                semester=$(jq -r '.semester' "$dir/config.json")
                year=$(jq -r '.year' "$dir/config.json")
              else
                title="Corso sconosciuto"
                faculty="N/D"
                level="N/D"
                professor="N/D"
                semester="N/D"
                year="N/D"
              fi

              # Metadata git
              last_edit_date=$(git log -1 --format="%cs" -- "$tex_file")
              last_editor_name=$(git log -1 --format="%an" -- "$tex_file")
              last_editor_url="https://github.com/$(git log -1 --format="%ae" -- "$tex_file" | cut -d'@' -f1)"
              contributors=$(git log --format='%an|%ae' -- "$tex_file" | sort -u | jq -R -s -c 'split("\n")[:-1] | map({name: split("|")[0], profile_url: ("https://github.com/" + (split("|")[1] | split("@")[0]))})')

              # Rimuove la vecchia entry se esiste e aggiunge la nuova
              json=$(echo "$json" | jq "map(select(.file_name != \"$pdf_file\")) + [{
                faculty: \"$faculty\",
                semester: \"$semester\",
                level: \"$level\",
                title: \"$title\",
                professor: \"$professor\",
                year: \"$year\",
                file_name: \"$pdf_file\",
                last_edit_date: \"$last_edit_date\",
                last_editor: { name: \"$last_editor_name\", profile_url: \"$last_editor_url\" },
                contributors: $contributors
              }]")
            else
              echo "❌ Nessun PDF trovato per $tex_file"
            fi
          done

          # Scrivi JSON aggiornato
          echo "$json" > public/pdfs.json

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Copy static website
        run: |
          mkdir -p public/web_pages
          cp -r web_pages/* public/web_pages/ || echo "Cartella web_pages non trovata"
          cp index.html public/ || echo "index.html mancante"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
