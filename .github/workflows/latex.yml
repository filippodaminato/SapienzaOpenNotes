name: Build LaTeX and Deploy PDFs

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect modified courses
        id: detect
        run: |
          # Trova tutte le cartelle dei corsi con un main.tex
          find . -name "main.tex" | xargs -n1 dirname | sort -u > all_courses.txt

          # Trova quali corsi hanno file modificati nell'ultimo commit
          git diff --name-only HEAD~1 HEAD | grep '\.tex$' | xargs -n1 dirname | sort -u | uniq > changed_courses.txt

          echo "all_courses=$(paste -sd ' ' all_courses.txt)" >> $GITHUB_OUTPUT
          echo "changed_courses=$(paste -sd ' ' changed_courses.txt)" >> $GITHUB_OUTPUT

      - name: Compile changed courses and update pdfs.json
        run: |
          mkdir -p public
          # Inizializza JSON array
          json="[]"

          for course_dir in ${{ steps.detect.outputs.all_courses }}; do
            echo "📄 Aggiornando metadati per $course_dir"

            main_tex="$course_dir/main.tex"
            pdf_file="$(echo "$course_dir" | sed 's/^\.\///; s/\//_/g').pdf"

            # Se il corso è stato modificato, ricompila il PDF
            if echo "${{ steps.detect.outputs.changed_courses }}" | grep -qw "$course_dir"; then
              echo "⚡ Compilo PDF per $course_dir"
              docker run --rm -v "$(pwd):/data" -w "/data/$course_dir" texlive/texlive:latest \
                latexmk -pdf -interaction=nonstopmode -halt-on-error main.tex || echo "⚠️ Compilazione fallita, mantengo PDF vecchio se presente"
            fi

            # Copia il PDF se esiste
            if [ -f "$course_dir/main.pdf" ]; then
              cp "$course_dir/main.pdf" "public/$pdf_file"
            fi

            # Lettura dati da config.json
            if [ -f "$course_dir/config.json" ]; then
              title=$(jq -r '.title' "$course_dir/config.json")
              faculty=$(jq -r '.faculty' "$course_dir/config.json")
              level=$(jq -r '.level' "$course_dir/config.json")
              professor=$(jq -r '.professor' "$course_dir/config.json")
              semester=$(jq -r '.semester' "$course_dir/config.json")
              year=$(jq -r '.year' "$course_dir/config.json")
            else
              title="Corso sconosciuto"
              faculty="N/D"
              level="N/D"
              professor="N/D"
              semester="N/D"
              year="N/D"
            fi

            # Tutti i file del corso
            course_files=$(find "$course_dir" -name "*.tex")

            # Metadata git
            last_edit_date=$(git log -1 --format="%cs" -- $course_files)
            last_editor_name=$(git log -1 --format="%an" -- $course_files)
            last_editor_url="https://github.com/$(git log -1 --format="%ae" -- $course_files | cut -d'@' -f1)"
            contributors=$(git log --format='%an|%ae' -- $course_files | sort -u | jq -R -s -c 'split("\n")[:-1] | map({name: split("|")[0], profile_url: ("https://github.com/" + (split("|")[1] | split("@")[0]))})')

            # Aggiunge/aggiorna JSON
            json=$(echo "$json" | jq "map(select(.file_name != \"$pdf_file\")) + [{
              faculty: \"$faculty\",
              semester: \"$semester\",
              level: \"$level\",
              title: \"$title\",
              professor: \"$professor\",
              year: \"$year\",
              file_name: \"$pdf_file\",
              last_edit_date: \"$last_edit_date\",
              last_editor: { name: \"$last_editor_name\", profile_url: \"$last_editor_url\" },
              contributors: $contributors
            }]")
          done

          echo "$json" > public/pdfs.json

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Copy static website
        run: |
          mkdir -p public/web_pages
          cp -r web_pages/* public/web_pages/ || echo "Cartella web_pages non trovata"
          cp index.html public/ || echo "index.html mancante"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
